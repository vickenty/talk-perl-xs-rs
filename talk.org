* Writing Perl extensions in Rust

  Vickenty Fesunov

  #+INCLUDE: email.txt

  http://github.com/vickenty/perl-xs

  #+BEGIN_NOTES
  name
  job
  #+END_NOTES

#+STARTUP: overview hideblocks
#+OPTIONS: num:nil toc:nil reveal_history:t reveal_title_slide:nil reveal_notes:t
#+REVEAL_ROOT: node_modules/reveal.js
#+REVEAL_THEME: black
#+REVEAL_TRANS: fade
#+REVEAL_EXTRA_CSS: talk.css
#+REVEAL_MARGIN: 0.0
#+HTML_HEAD: <link rel="stylesheet" href="notes.css"/>
#+PROPERTY: mkdirp yes
#+BEGIN_src elisp :exports none
  (org-export-define-derived-backend 'html-notes 'html
    :export-block '("NOTES")
    :translate-alist
    '((export-block . (lambda (el contents info)
                        (if (string= (org-element-property :type el) "NOTES")
                            (format "<div class=\"notes\">%s</div>"
                                    (org-export-string-as
                                     (org-element-property :value el)
                                     'html
                                     t)))))))
  (org-export-to-buffer 'html-notes "*Org Notes Export*")
#+END_src
# Local Variables:
# org-html-postamble: nil
# End:
#+BEGIN_NOTES
CLICK THE TIMER
#+END_NOTES
* We're hiring
  http://workingatbooking.com
* Perl extensions
  #+BEGIN_NOTES
  interpreter, sharp tool, checks
  #+END_NOTES
* C is not easy
  #+BEGIN_NOTES
  reference example
  #+END_NOTES
** null pointers
   #+BEGIN_SRC c
     AV* array = get_av("array", 0);
     SV** item = av_fetch(array, 0);
   #+END_SRC
   #+BEGIN_NOTES
   #+END_NOTES
** dangling pointers
   #+BEGIN_SRC c
     SV** item = av_fetch(array, 0);
     av_clear(array);
     char *buf = SvPV_nolen(*item);
   #+END_SRC
   #+BEGIN_NOTES
   unlike perl, no refcount
   must track lifetime
   reading from released memory
   #+END_NOTES
** buffer overflows
   #+BEGIN_SRC c
     char *buf = SvPV_nolen(*item);
     sprintf(buf, "%d", rand());
   #+END_SRC
   #+BEGIN_NOTES
   keep track of size of memory
   don't write things you don'w want overwritten
   #+END_NOTES
** and more
   * uninitialized variables
   * sequence points
   * integer overflows
   * aliasing rules
   * data races
   #+BEGIN_NOTES
   15 pages
   #+END_NOTES
* Perl XS API is not easy
** What does this function return?
   #+BEGIN_SRC c
     SSize_t av_len(AV* array_ptr);
   #+END_SRC
** reference counting
   #+BEGIN_SRC c
   XPUSHs(av_fetch(array, 0))
   // but
   XPUSHs(sv_2mortal(av_delete(array, 0)))
   #+END_SRC
** exceptions
   #+BEGIN_SRC c
   FILE *f = fopen("output", "w");
   fprintf(f, "%d", SvIV(value));
   fclose(f);
   #+END_SRC
* Just be careful?
  #+BEGIN_QUOTE
    We must do better.
  #+END_QUOTE
  --- Bjarne Stroustrup, 2015
  #+REVEAL_HTML: <small> http://www.stroustrup.com/resource-model.pdf </small>
* Rust
  http://rust-lang.org
  #+ATTR_REVEAL: :frag (reveal)
  * prevents segfaults
  * compatible with c
  * can do unsafe code if needed
  * safe abstractions
* Rust XS
** sum array
   #+BEGIN_SRC rust -n
     xs! {
         package Array::Util;

         sub sum_array(ctx) {








             xs_return!(ctx, 0.0);
         }
     }
   #+END_SRC
   #+BEGIN_NOTES
   skeleton, macros, context
   #+END_NOTES
** sum array
   #+BEGIN_SRC rust -n
     xs! {
         package Array::Util;

         sub sum_array(ctx) {
             let param: SV = ctx.st_fetch(0);







             xs_return!(ctx, 0.0);
         }
     }
   #+END_SRC
   #+BEGIN_NOTES
   get element, same names, no pointers, reference counts
   #+END_NOTES
** sum array
   #+BEGIN_SRC rust -n
     xs! {
         package Array::Util;

         sub sum_array(ctx) {
             let param: SV = ctx.st_fetch(0);
             let array: AV = param.deref_av();






             xs_return!(ctx, 0.0);
         }
     }
   #+END_SRC
   #+BEGIN_NOTES
   get array, not a reference, option
   #+END_NOTES
** sum array
   #+BEGIN_SRC rust -n
     xs! {
         package Array::Util;

         sub sum_array(ctx) {
             let param: SV = ctx.st_fetch(0);
             let array: AV = param.deref_av(); 
             //   ERROR: AV expected, but have Option<AV>





             xs_return!(ctx, 0.0);
         }
     }
   #+END_SRC
   #+BEGIN_NOTES
   does not compile, need to check
   #+END_NOTES
** sum array
   #+BEGIN_SRC rust -n
     xs! {
         package Array::Util;

         sub sum_array(ctx) {
             let param: SV = ctx.st_fetch(0);
             let array: AV = param.deref_av().expect("not an array ref");






             xs_return!(ctx, 0.0);
         }
     }
   #+END_SRC
   #+BEGIN_NOTES
   common or die idiom
   #+END_NOTES
** sum array
   #+BEGIN_SRC rust -n
     xs! {
         package Array::Util;

         sub sum_array(ctx) {
             let param: SV = ctx.st_fetch(0);
             let array: AV = param.deref_av().expect("not an array ref");
             let mut sum = 0.0;
             for index in 0..array.top_index() + 1 {
             


             }
             xs_return!(ctx, sum);
         }
     }
   #+END_SRC
   #+BEGIN_NOTES
   type inference
   #+END_NOTES
** sum array
   #+BEGIN_SRC rust -n
     xs! {
         package Array::Util;

         sub sum_array(ctx) {
             let param: SV = ctx.st_fetch(0);
             let array: AV = param.deref_av().expect("not an array ref");
             let mut sum = 0.0;
             for index in 0..array.top_index() + 1 {
                 if let Some(item) = array.fetch(index) {
                     sum += item;
                 }
             }
             xs_return!(ctx, sum);
         }
     }
   #+END_SRC
** sum array, take 2
   #+BEGIN_SRC rust -n
     xs! {
         package Array::Util;

         sub sum_array(ctx) {
             let param: SV = ctx.st_fetch(0);
             let array: AV = param.deref_av().expect("not an array ref");
             let sum: NV =





             xs_return!(ctx, sum);
         }
     }
   #+END_SRC
   #+BEGIN_NOTES
   rewind
   #+END_NOTES
** sum array, take 2
   #+BEGIN_SRC rust -n
     xs! {
         package Array::Util;

         sub sum_array(ctx) {
             let param: SV = ctx.st_fetch(0);
             let array: AV = param.deref_av().expect("not an array ref");
             let sum: NV = array.iter()





             xs_return!(ctx, sum);
         }
     }
   #+END_SRC
   #+BEGIN_NOTES
   iterator
   #+END_NOTES
** sum array, take 2
   #+BEGIN_SRC rust -n
     xs! {
         package Array::Util;

         sub sum_array(ctx) {
             let param: SV = ctx.st_fetch(0);
             let array: AV = param.deref_av().expect("not an array ref");
             let sum: NV = array.iter()
                 .map(|v| v.unwrap_or(0.0))




             xs_return!(ctx, sum);
         }
     }
   #+END_SRC
   #+BEGIN_NOTES
   map, code block, unwrap_or == '//'
   #+END_NOTES
** sum array, take 2
   #+BEGIN_SRC rust -n
     xs! {
         package Array::Util;

         sub sum_array(ctx) {
             let param: SV = ctx.st_fetch(0);
             let array: AV = param.deref_av().expect("not an array ref");
             let sum: NV = array.iter()
                 .map(|v| v.unwrap_or(0.0))
                 .sum();



             xs_return!(ctx, sum);
         }
     }
   #+END_SRC
* Benchmarks
   | Perl      | 1.003s | 100% |
   | Rust loop | 0.645s |  64% |
   | Rust iter | 0.637s |  63% |
   | XS        | 0.164s |  16% |
   #+TBLFM: $3 = 100 * $2 / @1$2 ; %d%%
* Why so slow?
  #+ATTR_REVEAL: :frag (reveal)
  * reference counting
  * no hot path inlining
  * exception handling
** COMMENT exceptions
   [[file:xcpt-1.svg]]
** exceptions
   file:xcpt-2.svg
   #+BEGIN_NOTES
   destructors, automatically called code, reference counting
   #+END_NOTES
** exceptions
   [[file:xcpt-3.svg]]
   #+BEGIN_NOTES
   what xs api croaks
   #+END_NOTES
** exceptions
   file:xcpt-4.svg
   #+BEGIN_NOTES
   catch, unwind, resume
   #+END_NOTES
* Conclusion
  #+ATTR_REVEAL: :frag (reveal)
  * it works
  * it is safer
  * it is slower
* Thanks
  * Booking.com
  * p5pclub
  * #rust and the Rust community
* FIN
  #+BEGIN_SRC rust
     xs! {
         package Array::Util;

         sub sum_array(ctx) {
             let param: SV = ctx.st_fetch(0);
             let array: AV = param.deref_av().expect("not an array ref");
             let mut sum = 0.0;
             for index in 0..array.top_index() + 1 {
                 if let Some(item) = array.fetch(index) {
                     sum += item;
                 }
             }
             xs_return!(ctx, sum);
         }
     }
  #+END_SRC
  http://github.com/vickenty/perl-xs
